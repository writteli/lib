{"version":3,"file":"index.min.js","sources":["../src/modules/fs.js","../src/modules/cms.js","../src/index.js"],"sourcesContent":["const path = require('path')\r\nconst fse = require('fs-extra')\r\n\r\nexport default {\r\n  $path: path,\r\n  getFiles (_path) {\r\n    return new Promise((resolve, reject) => {\r\n      fs.readdir(path.normalize(_path), (error, files) => {\r\n        if (!error) {\r\n          const results = []\r\n          files.forEach(file => {\r\n            results.push(path.normalize(_path, file))\r\n          })\r\n          resolve(results.reverse())\r\n        } else {\r\n          reject(error)\r\n        }\r\n      })\r\n    })\r\n  },\r\n  readFile (_path) {\r\n    return new Promise((resolve, reject) => {\r\n      fs.readFile(path.normalize(_path), 'utf8', (error, data) => {\r\n        if (!error) {\r\n          resolve(data)\r\n        } else {\r\n          reject(error)\r\n        }\r\n      })\r\n    })\r\n  },\r\n  // method below source: https://geedew.com/remove-a-directory-that-is-not-empty-in-nodejs/\r\n  deleteFolder: (_path) => {\r\n    if (fs.existsSync(_path)) {\r\n      fs.readdirSync(_path).forEach(file => {\r\n        const currentPath = path.normalize(_path, file)\r\n        if(fs.lstatSync(currentPath).isDirectory()) { // recurse\r\n          module.exports.deleteFolder(path.normalize(currentPath))\r\n        } else { // delete file\r\n          fs.unlinkSync(currentPath)\r\n        }\r\n      })\r\n      fs.rmdirSync(_path)\r\n    }\r\n  },\r\n  copyFolder (_sourcePath, _targetPath) {\r\n    return new Promise((resolve, reject) => {\r\n      fse.copy(path.normalize(_sourcePath), path.normalize(_targetPath)).then(() => {\r\n        resolve()\r\n      }).catch(err => {\r\n        reject(err)\r\n      })\r\n    })\r\n  }\r\n}","export default class Cms{\r\n  constructor (options) {\r\n    this.fs = options.fs\r\n    this.configUrl = options.configUrl\r\n    this.parser = options.parser\r\n    this.cache = {\r\n      listEntryLayouts: {},\r\n      listEntries: {}\r\n    }\r\n    this.config = ''\r\n  }\r\n\r\n  getConfig () {\r\n    if (this.configUrl && this.configUrl.length) {\r\n      this.fs.readFile(this.configUrl).then(configData => {\r\n        this.config = configData\r\n      })\r\n    } else {\r\n      throw new Error('Config URL has not been provided.')\r\n    }\r\n  }\r\n\r\n  getPages () {\r\n    if (!this.config) {\r\n      throw new Error('Config file has not been loaded yet.')\r\n    }\r\n    if (this.config && this.config.content && this.config.content.pages && Object.keys(this.config.content.pages).length) {\r\n      return Object.keys(this.config.content.pages).map(page => this.config.content.pages[page])\r\n    } else {\r\n      throw new Error('Pages definition is missing in config file.')\r\n    }\r\n  }\r\n\r\n  getPageData (page) {\r\n    if (!this.config) {\r\n      throw new Error('Config file has not been loaded yet.')\r\n    }\r\n    if (this.config && this.config.content && this.config.content.pages && this.config.content.pages[page]) {\r\n      const pageConfig = this.config.content.pages[page]\r\n      const pageContentPath = this.fs.$path.normalize(this.config.content.src, pageConfig.content)\r\n      const pageLayoutPath = this.fs.$path.normalize(this.config.theme.url, pageConfig.layout)\r\n      const pageContent = this.fs.readFile(pageContentPath)\r\n      const layoutContent = this.fs.readFile(pageLayoutPath)\r\n      return {\r\n        content: pageContent,\r\n        layout: layoutContent\r\n      }\r\n    } else {\r\n      throw new Error(`There is no such page as ${page}.`)\r\n    }\r\n  }\r\n\r\n  // TODO - not sure if longer needed\r\n  // getPageListEntryFiles (page) {\r\n  //   if (!this.config) {\r\n  //     throw new Error('Config file has not been loaded yet.')\r\n  //   }\r\n  //   if (this.config && this.config.content && this.config.content.pages && this.config.content.pages[page] && this.config.content.pages[page].type === 'list') {\r\n  //     const pageContent = this.config.content.pages[page]\r\n  //     if (pageContent.entry && pageContent.entry.content && pageContent.entry.content.length) {\r\n  //       if (!this.cache.listEntries.hasOwnProperty(page)) {\r\n  //         this.cache.listEntries[page] = []\r\n  //       }\r\n  //       const pageListEntry\r\n  //       this.cache.listEntries[page].push()\r\n  //     } else {\r\n  //       throw new Error(`Path for list entry contents has not been provided for ${page}.`)\r\n  //     }\r\n  //   } else {\r\n  //     throw new Error(`There is no such list page as ${page}.`)\r\n  //   }\r\n  // }\r\n\r\n  getListSingleEntryData (contentFileName, page) {\r\n    if (!this.config) {\r\n      throw new Error('Config file has not been loaded yet.')\r\n    }\r\n    if (this.config && this.config.content && this.config.content.pages && this.config.content.pages[page] && this.config.content.pages[page].type === 'list') {\r\n      const pageConfig = this.config.content.pages[page]\r\n      const pageEntryContentPath = this.fs.$path.normalize(this.config.content.src, pageConfig.entry.content)\r\n      const pageEntryContent = this.fs.readFile(pageEntryContentPath)\r\n      let data = {\r\n        content: pageEntryContent\r\n      }\r\n      if (this.cache.listEntryLayouts[page]) {\r\n        data.layout = this.cache.listEntryLayouts[page]\r\n      } else {\r\n        const pageEntryLayoutPath = this.fs.$path.normalize(this.config.content.src, pageConfig.entry.layout)\r\n        const layoutEntryContent = this.fs.readFile(pageEntryLayoutPath)\r\n        data.layout = layoutEntryContent\r\n      }\r\n      return data\r\n    } else {\r\n      throw new Error(`There is no such list page as ${page}.`)\r\n    }\r\n  }\r\n}\r\n","import fs from './modules/fs.js'\r\nimport Cms from './modules/cms.js'\r\n\r\nexport default class Writteli {\r\n  constructor (options) {\r\n    // abstract class check\r\n    if (new.target === Writteli) {\r\n      throw new Error('Cannot instantiate Base Class')\r\n    }\r\n    this.parser = {\r\n      content: options.parseContent,\r\n      template: options.parseTemplate\r\n    }\r\n    this.fs = fs\r\n    this.configUrl = options.configUrl\r\n    this.cms = new Cms({\r\n      configUrl: options.configUrl,\r\n      fs: options.fs,\r\n      parser: {\r\n        content: this.parser.content,\r\n        template: this.parser.template,\r\n        async: this.parser.async\r\n      }\r\n    })\r\n  }\r\n}\r\n"],"names":["path","require","fse","$path","getFiles","_path","Promise","resolve","reject","fs","readdir","normalize","error","files","results","forEach","file","push","reverse","readFile","data","deleteFolder","existsSync","readdirSync","currentPath","lstatSync","isDirectory","module","exports","unlinkSync","rmdirSync","copyFolder","_sourcePath","_targetPath","copy","then","err","Cms","options","configUrl","parser","cache","listEntryLayouts","listEntries","config","this","length","Error","configData","_this","content","pages","Object","keys","map","page","_this2","pageConfig","pageContentPath","src","pageLayoutPath","theme","url","layout","contentFileName","type","pageEntryContentPath","entry","pageEntryLayoutPath","layoutEntryContent","Writteli","parseContent","template","parseTemplate","cms","async"],"mappings":"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"}